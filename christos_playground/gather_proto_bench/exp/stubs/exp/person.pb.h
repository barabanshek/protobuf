// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exp/person.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_exp_2fperson_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_exp_2fperson_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_exp_2fperson_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_exp_2fperson_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_exp_2fperson_2eproto;
class M;
struct MDefaultTypeInternal;
extern MDefaultTypeInternal _M_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class M final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:M) */ {
 public:
  inline M() : M(nullptr) {}
  ~M() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR M(
      ::google::protobuf::internal::ConstantInitialized);

  inline M(const M& from) : M(nullptr, from) {}
  inline M(M&& from) noexcept
      : M(nullptr, std::move(from)) {}
  inline M& operator=(const M& from) {
    CopyFrom(from);
    return *this;
  }
  inline M& operator=(M&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const M& default_instance() {
    return *internal_default_instance();
  }
  static inline const M* internal_default_instance() {
    return reinterpret_cast<const M*>(
        &_M_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(M& a, M& b) { a.Swap(&b); }
  inline void Swap(M* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  M* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<M>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const M& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const M& from) { M::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(M* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "M"; }

 protected:
  explicit M(::google::protobuf::Arena* arena);
  M(::google::protobuf::Arena* arena, const M& from);
  M(::google::protobuf::Arena* arena, M&& from) noexcept
      : M(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF5FieldNumber = 5,
    kF6FieldNumber = 6,
    kF7FieldNumber = 7,
    kF8FieldNumber = 8,
    kF9FieldNumber = 9,
    kF10FieldNumber = 10,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  void clear_f1() ;
  ::int32_t f1() const;
  void set_f1(::int32_t value);

  private:
  ::int32_t _internal_f1() const;
  void _internal_set_f1(::int32_t value);

  public:
  // optional int32 f2 = 2;
  bool has_f2() const;
  void clear_f2() ;
  ::int32_t f2() const;
  void set_f2(::int32_t value);

  private:
  ::int32_t _internal_f2() const;
  void _internal_set_f2(::int32_t value);

  public:
  // optional int32 f3 = 3;
  bool has_f3() const;
  void clear_f3() ;
  ::int32_t f3() const;
  void set_f3(::int32_t value);

  private:
  ::int32_t _internal_f3() const;
  void _internal_set_f3(::int32_t value);

  public:
  // optional int32 f4 = 4;
  bool has_f4() const;
  void clear_f4() ;
  ::int32_t f4() const;
  void set_f4(::int32_t value);

  private:
  ::int32_t _internal_f4() const;
  void _internal_set_f4(::int32_t value);

  public:
  // optional int32 f5 = 5;
  bool has_f5() const;
  void clear_f5() ;
  ::int32_t f5() const;
  void set_f5(::int32_t value);

  private:
  ::int32_t _internal_f5() const;
  void _internal_set_f5(::int32_t value);

  public:
  // optional int32 f6 = 6;
  bool has_f6() const;
  void clear_f6() ;
  ::int32_t f6() const;
  void set_f6(::int32_t value);

  private:
  ::int32_t _internal_f6() const;
  void _internal_set_f6(::int32_t value);

  public:
  // optional int32 f7 = 7;
  bool has_f7() const;
  void clear_f7() ;
  ::int32_t f7() const;
  void set_f7(::int32_t value);

  private:
  ::int32_t _internal_f7() const;
  void _internal_set_f7(::int32_t value);

  public:
  // optional int32 f8 = 8;
  bool has_f8() const;
  void clear_f8() ;
  ::int32_t f8() const;
  void set_f8(::int32_t value);

  private:
  ::int32_t _internal_f8() const;
  void _internal_set_f8(::int32_t value);

  public:
  // optional int32 f9 = 9;
  bool has_f9() const;
  void clear_f9() ;
  ::int32_t f9() const;
  void set_f9(::int32_t value);

  private:
  ::int32_t _internal_f9() const;
  void _internal_set_f9(::int32_t value);

  public:
  // optional int32 f10 = 10;
  bool has_f10() const;
  void clear_f10() ;
  ::int32_t f10() const;
  void set_f10(::int32_t value);

  private:
  ::int32_t _internal_f10() const;
  void _internal_set_f10(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:M)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_M_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f1_;
    ::int32_t f2_;
    ::int32_t f3_;
    ::int32_t f4_;
    ::int32_t f5_;
    ::int32_t f6_;
    ::int32_t f7_;
    ::int32_t f8_;
    ::int32_t f9_;
    ::int32_t f10_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exp_2fperson_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// M

// optional int32 f1 = 1;
inline bool M::has_f1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void M::clear_f1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t M::f1() const {
  // @@protoc_insertion_point(field_get:M.f1)
  return _internal_f1();
}
inline void M::set_f1(::int32_t value) {
  _internal_set_f1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:M.f1)
}
inline ::int32_t M::_internal_f1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f1_;
}
inline void M::_internal_set_f1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f1_ = value;
}

// optional int32 f2 = 2;
inline bool M::has_f2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void M::clear_f2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t M::f2() const {
  // @@protoc_insertion_point(field_get:M.f2)
  return _internal_f2();
}
inline void M::set_f2(::int32_t value) {
  _internal_set_f2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:M.f2)
}
inline ::int32_t M::_internal_f2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f2_;
}
inline void M::_internal_set_f2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f2_ = value;
}

// optional int32 f3 = 3;
inline bool M::has_f3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void M::clear_f3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t M::f3() const {
  // @@protoc_insertion_point(field_get:M.f3)
  return _internal_f3();
}
inline void M::set_f3(::int32_t value) {
  _internal_set_f3(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:M.f3)
}
inline ::int32_t M::_internal_f3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f3_;
}
inline void M::_internal_set_f3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f3_ = value;
}

// optional int32 f4 = 4;
inline bool M::has_f4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void M::clear_f4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t M::f4() const {
  // @@protoc_insertion_point(field_get:M.f4)
  return _internal_f4();
}
inline void M::set_f4(::int32_t value) {
  _internal_set_f4(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:M.f4)
}
inline ::int32_t M::_internal_f4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f4_;
}
inline void M::_internal_set_f4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f4_ = value;
}

// optional int32 f5 = 5;
inline bool M::has_f5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void M::clear_f5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t M::f5() const {
  // @@protoc_insertion_point(field_get:M.f5)
  return _internal_f5();
}
inline void M::set_f5(::int32_t value) {
  _internal_set_f5(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:M.f5)
}
inline ::int32_t M::_internal_f5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f5_;
}
inline void M::_internal_set_f5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f5_ = value;
}

// optional int32 f6 = 6;
inline bool M::has_f6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void M::clear_f6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t M::f6() const {
  // @@protoc_insertion_point(field_get:M.f6)
  return _internal_f6();
}
inline void M::set_f6(::int32_t value) {
  _internal_set_f6(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:M.f6)
}
inline ::int32_t M::_internal_f6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f6_;
}
inline void M::_internal_set_f6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f6_ = value;
}

// optional int32 f7 = 7;
inline bool M::has_f7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void M::clear_f7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t M::f7() const {
  // @@protoc_insertion_point(field_get:M.f7)
  return _internal_f7();
}
inline void M::set_f7(::int32_t value) {
  _internal_set_f7(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:M.f7)
}
inline ::int32_t M::_internal_f7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f7_;
}
inline void M::_internal_set_f7(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f7_ = value;
}

// optional int32 f8 = 8;
inline bool M::has_f8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void M::clear_f8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t M::f8() const {
  // @@protoc_insertion_point(field_get:M.f8)
  return _internal_f8();
}
inline void M::set_f8(::int32_t value) {
  _internal_set_f8(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:M.f8)
}
inline ::int32_t M::_internal_f8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f8_;
}
inline void M::_internal_set_f8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f8_ = value;
}

// optional int32 f9 = 9;
inline bool M::has_f9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void M::clear_f9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t M::f9() const {
  // @@protoc_insertion_point(field_get:M.f9)
  return _internal_f9();
}
inline void M::set_f9(::int32_t value) {
  _internal_set_f9(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:M.f9)
}
inline ::int32_t M::_internal_f9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f9_;
}
inline void M::_internal_set_f9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f9_ = value;
}

// optional int32 f10 = 10;
inline bool M::has_f10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void M::clear_f10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t M::f10() const {
  // @@protoc_insertion_point(field_get:M.f10)
  return _internal_f10();
}
inline void M::set_f10(::int32_t value) {
  _internal_set_f10(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:M.f10)
}
inline ::int32_t M::_internal_f10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f10_;
}
inline void M::_internal_set_f10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f10_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_exp_2fperson_2eproto_2epb_2eh
